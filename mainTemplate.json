{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01-preview/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dciName": {
      "metadata": {
        "description": "Simple name for the Docker EE infrastructure"
      },
      "type": "string"
    },
    "azureClientID": {
      "metadata": {
        "description": "ServicePrincipal Client ID"
      },
      "type": "string"
    },
    "azureClientSecret": {
      "metadata": {
        "description": "ServicePrincipal Client Secret"
      },
      "type": "securestring"
    },
    "linuxOffer": {
      "defaultValue": "UbuntuServer",
      "allowedValues": [
        "UbuntuServer",
        "RHEL",
        "CentOS"
      ],
      "type": "string",
      "metadata": {
        "description": "Specify Linux Offer for the Infrastructure.  Examples: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage"
      }
    },
    "linuxOSVersion": {
      "allowedValues": [
        "16.04-LTS",
        "7.5",
        "7.4"
      ],
      "type": "string",
      "metadata": {
        "description": "Specify OS version for the Infrastructure [16.04-LTS (Ubuntu), 7.4 (RHEL), 7.5 (RHEL), .....], Examples: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for jumpbox."
      }
    },
    "dockerUCPVersion": {
      "defaultValue": "3.0.2",
      "type": "string",
      "metadata": {
        "description": "Docker UCP Version"
      }
    },
    "dockerDTRVersion": {
      "defaultValue": "5.3.0",
      "type": "string",
      "metadata": {
        "description": "Docker Trusted Registry Version"
      }
    },
    "dockerEngineVersion": {
      "defaultValue": "17.06",
      "type": "string",
      "metadata": {
        "description": "Docker Engine Version"
      }
    },
    "dockerEESubscription": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Docker EE Subscription URL(obtained from https://store.docker.com)"
      }
    },
    "dockerEELicense": {
      "metadata": {
        "description": "Upload your Docker Enterprise Edition License Key"
      },
      "type": "SecureString"
    },
    "sshPubKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Linux SSH public key"
      }
    },
    "managerCount": {
      "defaultValue": 1,
      "type": "int",
      "minValue": 1,
      "metadata": {
        "description": "Number of manager nodes"
      }
    },
    "managervmSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2"
      ],
      "defaultValue": "Standard_D3_v2",
      "type": "string",
      "metadata": {
        "description": "Size of the Manager VM"
      }
    },
    "linuxworkerCount": {
       "defaultValue": 1,
       "type": "int",
       "minValue": 0,
       "metadata": {
         "description": "Number of Linux Worker nodes"
       }
    },
    "linuxworkervmSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2"
       ],
       "defaultValue": "Standard_D2_v2",
       "type": "string",
       "metadata": {
         "description": "Size of the Linux Worker VM"
       }
    },
    "winworkerCount": {
      "defaultValue": 1,
      "type": "int",
      "minValue": 0,
      "metadata": {
        "description": "Number of Windows Worker nodes"
      }
    },
    "winworkervmSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2"
      ],
      "defaultValue": "Standard_D2_v2",
      "type": "string",
      "metadata": {
        "description": "Size of the Windows Worker VM"
      }
    },
    "resourceLocation": {
      "allowedValues": [
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "usgovarizona",
        "usgovtexas",
        "usgovvirginia",
        "usgoviowa"
      ],
      "metadata": {
        "description": "Location of the resources"
      },
      "type": "string"
    },
    "artifactBaseUri": {
      "defaultValue": "https://raw.githubusercontent.com/uday-shetty/dci-test/master/",
      "type": "string"
    }
  },
  "variables": {
    "DockerProviderTag": "8CF0E79C-DF97-4992-9B59-602DB544D354",
    "namingInfix": "dciee2",
    "longNamingInfix": "[toLower('dcijumpbox')]",
    "jumpBoxName": "[concat(variables('namingInfix'), 'jbox')]",
    "jumpBoxSAName": "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), 'jumpboxsa')), 'jb')]",
    "jumpBoxOSDiskName": "[concat(variables('jumpBoxName'), 'osdisk')]",
    "jumpBoxVHDContainerName": "[concat(variables('jumpBoxName'), 'vhd')]",
    "jumpBoxIPConfigName": "[concat(variables('jumpBoxName'), 'ipconfig')]",
    "jumpBoxNicName": "[concat(variables('jumpBoxName'), 'nic')]",
    "vmSku": "Standard_DS2",
    "storageAccountType": "Standard_LRS",
    "newStorageAccountSuffix": "[concat(variables('namingInfix'), 'sa')]",
    "uniqueStringArray": [
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '0')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '1')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '2')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '3')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '4')))]"
    ],
    "saCount": "[length(variables('uniqueStringArray'))]",
    "osDiskName": "[concat(variables('namingInfix'), 'osdisk')]",
    "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
    "subnetName": "[concat(variables('namingInfix'), 'subnet')]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "azureRegion": "[resourceGroup().location]",
    "azureSubscriptionID": "[subscription().subscriptionId]",
    "azureTenantID": "[subscription().tenantId]",
    "adminUsername": "docker",
    "osType": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "16.04-LTS",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-04-01"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('jumpBoxSAName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('jumpBoxNicName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('jumpBoxIPConfigName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('jumpBoxName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('jumpBoxSAName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpBoxNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSku')]"
        },
        "osProfile": {
          "computerName": "[variables('jumpBoxName')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[variables('jumpBoxOSDiskName')]",
            "vhd": {
              "uri": "[concat('http://',variables('jumpBoxSAName'),'.blob.core.windows.net/',variables('jumpBoxVHDContainerName'),'/',variables('jumpBoxOSDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('jumpBoxNicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('jumpBoxSAName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('jumpBoxName'), '/extension')]",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('jumpBoxName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": "true",
        "settings": {
          "fileUris": [
             "[concat(parameters('artifactBaseUri'), 'dci-azure.sh')]"
          ]
        },
        "protectedSettings": {
	  "commandToExecute": "[concat('bash dci-azure.sh ', parameters('azureClientID'), ' ', parameters('azureClientSecret'), ' ', variables('azureSubscriptionID'), ' ',  variables('azureTenantID'), ' ', variables('azureRegion'), ' ', parameters('dockerEESubscription'), ' ', parameters('dockerEngineVersion'), ' ', parameters('dockerUCPVersion'), ' ', parameters('dockerDTRVersion'), ' ', parameters('dockerEELicense'), ' ', parameters('managerCount'), ' ', parameters('managervmSize'), ' ', parameters('linuxworkerCount'), ' ', parameters('linuxworkervmSize'), ' ', parameters('winworkerCount'), ' ', parameters('winworkervmSize'), ' ', parameters('linuxOffer'), ' ', parameters('linuxOSVersion'), ' ', parameters('dciName'), ' ', parameters('adminPassword'), ' ', base64(parameters('sshPubKey')))]"
        }
      }
    }
  ]
}
